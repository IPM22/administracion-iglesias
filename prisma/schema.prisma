// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===== NUEVAS TABLAS MULTI-TENANT =====

model Iglesia {
  id            Int      @id @default(autoincrement())
  nombre        String
  descripcion   String?
  direccion     String?
  telefono      String?
  correo        String?
  sitioWeb      String?
  logoUrl       String?
  
  // Configuración
  configuracion Json?    // Para settings específicos de la iglesia
  activa        Boolean  @default(true)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  usuarios      UsuarioIglesia[]
  miembros      Miembro[]
  familias      Familia[]
  visitas       Visita[]
  ministerios   Ministerio[]
  actividades   Actividad[]
  tiposActividad TipoActividad[]
  
  @@map("iglesias")
}

model Usuario {
  id            String   @id @default(cuid()) // Compatible con Supabase Auth
  email         String   @unique
  nombres       String
  apellidos     String
  avatar        String?
  telefono      String?
  
  // Estado del usuario
  emailVerified Boolean  @default(false)
  activo        Boolean  @default(true)
  primerLogin   Boolean  @default(true) // Para mostrar wizard
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ultimoLogin   DateTime?
  
  // Relaciones
  iglesias      UsuarioIglesia[]
  
  @@map("usuarios")
}

model UsuarioIglesia {
  id        Int      @id @default(autoincrement())
  usuarioId String
  iglesiaId Int
  rol       RolUsuario @default(MIEMBRO)
  estado    EstadoUsuarioIglesia @default(PENDIENTE)
  
  // Permisos específicos (JSON para flexibilidad)
  permisos  Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  iglesia   Iglesia  @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  
  @@unique([usuarioId, iglesiaId])
  @@map("usuario_iglesias")
}

enum RolUsuario {
  ADMIN       // Administrador total de la iglesia
  PASTOR      // Pastor principal
  LIDER       // Líder de ministerio
  SECRETARIO  // Secretario/administrativa
  MIEMBRO     // Miembro regular
}

enum EstadoUsuarioIglesia {
  ACTIVO
  PENDIENTE   // Esperando aprobación
  RECHAZADO
  SUSPENDIDO
}

// ===== TABLAS EXISTENTES ACTUALIZADAS =====

model Miembro {
  id                Int       @id @default(autoincrement())
  iglesiaId         Int       // NUEVO: Filtro por iglesia
  nombres           String
  apellidos         String
  correo            String?
  telefono          String?
  celular           String?
  direccion         String?
  fechaNacimiento   DateTime?
  sexo              String?
  estadoCivil       String?
  ocupacion         String?
  foto              String?
  notas             String?
  
  // Información eclesiástica
  fechaIngreso      DateTime  @default(now())
  fechaBautismo     DateTime?
  fechaConfirmacion DateTime?
  estado            String    @default("Activo")
  
  // Relación familiar
  familiaId         Int?
  relacion          String?
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  
  // Relaciones
  iglesia           Iglesia   @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  familia           Familia?  @relation(fields: [familiaId], references: [id])
  ministerios       MiembroMinisterio[]
  visitasInvitadas  Visita[]  @relation("MiembroInvita")
  historialVisitas  HistorialVisita[]
  familiares        Familiar[]
  
  // Para conversiones desde visitas
  visitaOriginal    Visita?   @relation("VisitaConvertida")
  
  @@map("miembros")
}

model Familia {
  id              Int       @id @default(autoincrement())
  iglesiaId       Int       // NUEVO: Filtro por iglesia
  apellido        String
  nombre          String?
  direccion       String?
  telefono        String?
  correo          String?
  notas           String?
  estado          String    @default("Activa")
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  iglesia         Iglesia   @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  miembros        Miembro[]
  visitas         Visita[]
  vinculos        VinculoFamiliar[] @relation("FamiliaOrigen")
  vinculosRelacionados VinculoFamiliar[] @relation("FamiliaRelacionada")
  
  @@map("familias")
}

model Visita {
  id                    Int       @id @default(autoincrement())
  iglesiaId             Int       // NUEVO: Filtro por iglesia
  nombres               String
  apellidos             String
  correo                String?
  telefono              String?
  celular               String?
  direccion             String?
  fechaNacimiento       DateTime?
  sexo                  String?
  estadoCivil           String?
  ocupacion             String?
  foto                  String?
  
  // Información de la visita
  fechaPrimeraVisita    DateTime?
  comoConocioIglesia    String?
  motivoVisita          String?
  intereses             String?
  notas                 String?
  estado                String    @default("Activa")
  
  // Relación familiar
  familia               String?
  familiaId             Int?
  
  // Invitación
  miembroInvitaId       Int?
  
  // Conversión a miembro
  miembroConvertidoId   Int?      @unique
  fechaConversion       DateTime?
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  
  // Relaciones
  iglesia               Iglesia   @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  familiaRelacion       Familia?  @relation(fields: [familiaId], references: [id])
  miembroInvita         Miembro?  @relation("MiembroInvita", fields: [miembroInvitaId], references: [id])
  miembroConvertido     Miembro?  @relation("VisitaConvertida", fields: [miembroConvertidoId], references: [id])
  historialVisitas      HistorialVisita[]
  
  @@map("visitas")
}

model Ministerio {
  id                Int       @id @default(autoincrement())
  iglesiaId         Int       // NUEVO: Filtro por iglesia
  nombre            String
  descripcion       String?
  liderPrincipalId  Int?
  estado            String    @default("Activo")
  colorHex          String?
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relaciones
  iglesia           Iglesia   @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  miembros          MiembroMinisterio[]
  actividades       Actividad[]
  
  @@map("ministerios")
}

model Actividad {
  id                Int       @id @default(autoincrement())
  iglesiaId         Int       // NUEVO: Filtro por iglesia
  nombre            String
  descripcion       String?
  fecha             DateTime  // Mantener por compatibilidad
  fechaInicio       DateTime? // Nueva fecha de inicio para rangos
  fechaFin          DateTime? // Nueva fecha de fin para rangos
  esRangoFechas     Boolean   @default(false) // Indica si es una actividad de múltiples días
  horaInicio        String?
  horaFin           String?
  ubicacion         String?
  googleMapsEmbed   String?
  responsable       String?
  estado            String    @default("Programada")
  banner            String?
  
  // Relaciones
  tipoActividadId   Int
  ministerioId      Int?
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relaciones
  iglesia           Iglesia       @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  tipoActividad     TipoActividad @relation(fields: [tipoActividadId], references: [id])
  ministerio        Ministerio?   @relation(fields: [ministerioId], references: [id])
  historialVisitas  HistorialVisita[]
  
  @@map("actividades")
}

model TipoActividad {
  id          Int       @id @default(autoincrement())
  iglesiaId   Int       // NUEVO: Filtro por iglesia
  nombre      String
  descripcion String?
  tipo        String    @default("Regular") // Regular, Especial
  colorHex    String?
  activo      Boolean   @default(true)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  iglesia     Iglesia     @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  actividades Actividad[]
  historialVisitas HistorialVisita[]
  
  @@map("tipos_actividad")
}

// ===== TABLAS DE RELACIÓN (SIN CAMBIOS MAYORES) =====

model MiembroMinisterio {
  id          Int         @id @default(autoincrement())
  miembroId   Int
  ministerioId Int
  cargo       String?
  rol         String?
  fechaInicio DateTime    @default(now())
  fechaFin    DateTime?
  estado      String      @default("Activo")
  esLider     Boolean     @default(false)
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relaciones
  miembro     Miembro     @relation(fields: [miembroId], references: [id], onDelete: Cascade)
  ministerio  Ministerio  @relation(fields: [ministerioId], references: [id], onDelete: Cascade)
  
  @@unique([miembroId, ministerioId])
  @@map("miembro_ministerios")
}

model HistorialVisita {
  id              Int           @id @default(autoincrement())
  miembroId       Int?
  visitaId        Int?
  actividadId     Int?
  tipoActividadId Int?
  fecha           DateTime      @default(now())
  notas           String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relaciones
  miembro         Miembro?      @relation(fields: [miembroId], references: [id], onDelete: Cascade)
  visita          Visita?       @relation(fields: [visitaId], references: [id], onDelete: Cascade)
  actividad       Actividad?    @relation(fields: [actividadId], references: [id], onDelete: Cascade)
  tipoActividad   TipoActividad? @relation(fields: [tipoActividadId], references: [id], onDelete: Cascade)
  
  @@map("historial_visitas")
}

model Familiar {
  id            Int     @id @default(autoincrement())
  miembroId     Int
  nombres       String
  apellidos     String
  relacion      String
  fechaNacimiento DateTime?
  telefono      String?
  esMiembro     Boolean @default(false)
  miembroRelacionadoId Int?
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  miembro       Miembro  @relation(fields: [miembroId], references: [id], onDelete: Cascade)
  
  @@map("familiares")
}

model VinculoFamiliar {
  id                    Int      @id @default(autoincrement())
  familiaOrigenId       Int
  familiaRelacionadaId  Int
  tipoVinculo           String
  descripcion           String?
  miembroVinculoId      Int?
  fechaCreacion         DateTime @default(now())
  activo                Boolean  @default(true)
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relaciones
  familiaOrigen         Familia  @relation("FamiliaOrigen", fields: [familiaOrigenId], references: [id], onDelete: Cascade)
  familiaRelacionada    Familia  @relation("FamiliaRelacionada", fields: [familiaRelacionadaId], references: [id], onDelete: Cascade)
  
  @@unique([familiaOrigenId, familiaRelacionadaId])
  @@map("vinculos_familiares")
} 
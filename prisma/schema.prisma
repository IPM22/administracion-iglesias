// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===== NUEVAS TABLAS MULTI-TENANT =====

model Iglesia {
  id            Int      @id @default(autoincrement())
  nombre        String
  descripcion   String?
  direccion     String?
  telefono      String?
  correo        String?
  sitioWeb      String?
  logoUrl       String?
  
  // Configuración
  configuracion Json?    // Para settings específicos de la iglesia
  activa        Boolean  @default(true)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  usuarios      UsuarioIglesia[]
  familias      Familia[]
  ministerios   Ministerio[]
  actividades   Actividad[]
  tiposActividad TipoActividad[]
  personas      Persona[]
  
  @@map("iglesias")
}

model Usuario {
  id            String   @id @default(cuid()) // Compatible con Supabase Auth
  email         String   @unique
  nombres       String
  apellidos     String
  avatar        String?
  telefono      String?
  
  // Estado del usuario
  emailVerified Boolean  @default(false)
  activo        Boolean  @default(true)
  primerLogin   Boolean  @default(true) // Para mostrar wizard
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ultimoLogin   DateTime?
  
  // Relaciones
  iglesias      UsuarioIglesia[]
  
  @@map("usuarios")
}

model UsuarioIglesia {
  id        Int      @id @default(autoincrement())
  usuarioId String
  iglesiaId Int
  rol       RolUsuario @default(MIEMBRO)
  estado    EstadoUsuarioIglesia @default(PENDIENTE)
  
  // Permisos específicos (JSON para flexibilidad)
  permisos  Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  iglesia   Iglesia  @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  
  @@unique([usuarioId, iglesiaId])
  @@map("usuario_iglesias")
}

enum RolUsuario {
  ADMIN       // Administrador total de la iglesia
  PASTOR      // Pastor principal
  LIDER       // Líder de ministerio
  SECRETARIO  // Secretario/administrativa
  MIEMBRO     // Miembro regular
}

enum EstadoUsuarioIglesia {
  ACTIVO
  PENDIENTE   // Esperando aprobación
  RECHAZADO
  SUSPENDIDO
}

// ===== MODELO UNIFICADO PERSONA =====

enum TipoPersona {
  NINO
  ADOLESCENTE
  JOVEN
  ADULTO
  ADULTO_MAYOR
  ENVEJECIENTE
}

enum RolPersona {
  MIEMBRO
  VISITA
  INVITADO
  NINO
}

enum EstadoPersona {
  ACTIVA
  INACTIVA
  RECURRENTE
  NUEVA
}

model Persona {
  id                Int       @id @default(autoincrement())
  iglesiaId         Int
  nombres           String
  apellidos         String
  correo            String?
  telefono          String?
  celular           String?
  direccion         String?
  fechaNacimiento   DateTime?
  sexo              String?
  estadoCivil       String?
  ocupacion         String?
  foto              String?
  notas             String?

  // Clasificación
  tipo              TipoPersona     @default(NINO)
  rol               RolPersona      @default(VISITA)
  estado            EstadoPersona   @default(ACTIVA)

  // Info eclesiástica
  fechaIngreso      DateTime?
  fechaBautismo     DateTime?
  fechaConfirmacion DateTime?

  // Info específica de visitas
  fechaPrimeraVisita    DateTime?
  comoConocioIglesia    String?
  motivoVisita          String?
  intereses             String?

  // Familia
  familiaId         Int?
  relacionFamiliar  String?

  // Conversión / vínculos
  personaInvitaId   Int?
  personaConvertidaId Int? @unique
  fechaConversion   DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  iglesia           Iglesia   @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  familia           Familia?  @relation(fields: [familiaId], references: [id])
  personaInvita     Persona?  @relation("PersonaInvita", fields: [personaInvitaId], references: [id])
  personaConvertida Persona?  @relation("PersonaConvertida", fields: [personaConvertidaId], references: [id])
  personasInvitadas Persona[] @relation("PersonaInvita")
  personasConvertidas Persona[] @relation("PersonaConvertida")

  historialVisitas  HistorialVisita[]
  ministerios       PersonaMinisterio[]
  familiares        Familiar[]

  @@map("personas")
}

model Familia {
  id              Int       @id @default(autoincrement())
  iglesiaId       Int       // NUEVO: Filtro por iglesia
  apellido        String
  nombre          String?
  direccion       String?
  telefono        String?
  correo          String?
  notas           String?
  estado          String    @default("Activa")
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  iglesia         Iglesia   @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  personas        Persona[]
  vinculos        VinculoFamiliar[] @relation("FamiliaOrigen")
  vinculosRelacionados VinculoFamiliar[] @relation("FamiliaRelacionada")
  
  @@map("familias")
}

model Ministerio {
  id                Int       @id @default(autoincrement())
  iglesiaId         Int       // NUEVO: Filtro por iglesia
  nombre            String
  descripcion       String?
  liderPrincipalId  Int?
  estado            String    @default("Activo")
  colorHex          String?
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relaciones
  iglesia           Iglesia   @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  personas          PersonaMinisterio[]
  actividades       Actividad[]
  
  @@map("ministerios")
}

model ActividadHorario {
  id          Int      @id @default(autoincrement())
  actividadId Int
  fecha       DateTime
  horaInicio  String?
  horaFin     String?
  notas       String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  actividad   Actividad @relation(fields: [actividadId], references: [id], onDelete: Cascade)
  historialVisitas HistorialVisita[]
  
  @@map("actividad_horarios")
}

model Actividad {
  id              Int       @id @default(autoincrement())
  iglesiaId       Int
  nombre          String
  descripcion     String?
  fecha           DateTime
  fechaInicio     DateTime?
  fechaFin        DateTime?
  esRangoFechas   Boolean   @default(false)
  horaInicio      String?
  horaFin         String?
  ubicacion       String?
  googleMapsEmbed String?   @db.Text
  responsable     String?
  estado          String    @default("Programada")
  banner          String?
  tipoActividadId Int
  ministerioId    Int?
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  iglesia         Iglesia   @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  tipoActividad   TipoActividad @relation(fields: [tipoActividadId], references: [id], onDelete: Restrict)
  ministerio      Ministerio? @relation(fields: [ministerioId], references: [id], onDelete: SetNull)
  horarios        ActividadHorario[] // Nueva relación
  historialVisitas HistorialVisita[]
  
  @@map("actividades")
}

model TipoActividad {
  id          Int       @id @default(autoincrement())
  iglesiaId   Int       // NUEVO: Filtro por iglesia
  nombre      String
  descripcion String?
  tipo        String    @default("Regular") // Regular, Especial
  colorHex    String?
  activo      Boolean   @default(true)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  iglesia     Iglesia     @relation(fields: [iglesiaId], references: [id], onDelete: Cascade)
  actividades Actividad[]
  historialVisitas HistorialVisita[]
  
  @@map("tipos_actividad")
}

// ===== TABLAS DE RELACIÓN ACTUALIZADAS =====

// Nueva tabla para relacionar personas con ministerios
model PersonaMinisterio {
  id          Int         @id @default(autoincrement())
  personaId   Int
  ministerioId Int
  cargo       String?
  rol         String?
  fechaInicio DateTime    @default(now())
  fechaFin    DateTime?
  estado      String      @default("Activo")
  esLider     Boolean     @default(false)
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relaciones
  persona     Persona     @relation(fields: [personaId], references: [id], onDelete: Cascade)
  ministerio  Ministerio  @relation(fields: [ministerioId], references: [id], onDelete: Cascade)
  
  @@unique([personaId, ministerioId])
  @@map("persona_ministerios")
}

model HistorialVisita {
  id              Int           @id @default(autoincrement())
  personaId       Int?
  actividadId     Int?
  horarioId       Int?          // Nuevo: referencia al horario específico
  tipoActividadId Int?
  fecha           DateTime      @default(now())
  fechaEspecifica DateTime?     // Nueva: fecha específica para actividades de rango
  notas           String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relaciones
  persona         Persona?      @relation(fields: [personaId], references: [id], onDelete: Cascade)
  actividad       Actividad?    @relation(fields: [actividadId], references: [id], onDelete: Cascade)
  horario         ActividadHorario? @relation(fields: [horarioId], references: [id], onDelete: SetNull)
  tipoActividad   TipoActividad? @relation(fields: [tipoActividadId], references: [id], onDelete: Cascade)
  
  @@map("historial_visitas")
}

model Familiar {
  id            Int     @id @default(autoincrement())
  personaId     Int
  nombres       String
  apellidos     String
  relacion      String
  fechaNacimiento DateTime?
  telefono      String?
  esMiembro     Boolean @default(false)
  personaRelacionadaId Int?
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  persona       Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)
  
  @@map("familiares")
}

model VinculoFamiliar {
  id                    Int      @id @default(autoincrement())
  familiaOrigenId       Int
  familiaRelacionadaId  Int
  tipoVinculo           String
  descripcion           String?
  personaVinculoId      Int?
  fechaCreacion         DateTime @default(now())
  activo                Boolean  @default(true)
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relaciones
  familiaOrigen         Familia  @relation("FamiliaOrigen", fields: [familiaOrigenId], references: [id], onDelete: Cascade)
  familiaRelacionada    Familia  @relation("FamiliaRelacionada", fields: [familiaRelacionadaId], references: [id], onDelete: Cascade)
  
  @@unique([familiaOrigenId, familiaRelacionadaId])
  @@map("vinculos_familiares")
} 